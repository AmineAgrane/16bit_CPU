LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY alu is
	PORT ( 	
		A: IN STD_LOGIC_VECTOR(15 DOWNTO 0);
		B: IN STD_LOGIC_VECTOR(15 DOWNTO 0);
		instruction: IN STD_LOGIC_VECTOR(1 DOWNTO 0);
		result: OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		overflow: OUT STD_LOGIC
	);
END alu;

ARCHITECTURE Behavior OF alu IS
	-- On déclare le componenet du full adder
	COMPONENT full_adder_generic
		GENERIC (SIZE : INTEGER);
		PORT ( 
			A, B : IN STD_LOGIC_VECTOR(SIZE - 1 DOWNTO 0);
			CIN : IN STD_LOGIC;
			COUT : OUT STD_LOGIC;
			S : OUT STD_LOGIC_VECTOR(SIZE - 1 DOWNTO 0));
	END COMPONENT;
	
	 SIGNAL BT, Binv: STD_LOGIC_VECTOR(15 DOWNTO 0);
	 SIGNAL add_sub: STD_LOGIC;
	 SIGNAL resultAddSub: STD_LOGIC_VECTOR(15 DOWNTO 0);
	 SIGNAL resultMult: STD_LOGIC_VECTOR(31 DOWNTO 0);
	 SIGNAL addOver2: STD_LOGIC;
	 SIGNAL BCompl: STD_LOGIC_VECTOR(15 DOWNTO 0);
	BEGIN
	 
   -- Au début, on calcule Complémentaire(B)+1 et on le met dans BCompl
   -- Si c'est une addition, on fait result <= A + B
   -- Si c'est une soustraction, on fait result <= A + Complémentaire(B) + 1

    -- On calcule Complémentraire(B)+1

	Binv <= (B XOR "1111111111111111"); 	-- Binv <= NOT(B);
	addTmp: full_adder_generic
		GENERIC MAP (16)
		PORT MAP (Binv, "0000000000000001", '0', addOver2, BCompl); 
	 
	--BT <= B WHEN instruction(0)='0' ELSE (BCompl);
	IF(instruction(0) ='0') THEN
	BT <= B
	ELSE
	BT <= BCompl
	END IF;

	addSub: full_adder_generic
		GENERIC MAP (16)
		PORT MAP (A, BT, '0', overFlow, result);
		
		
END Behavior;